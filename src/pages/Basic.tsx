import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import styled from 'styled-components';
import { Divider } from 'antd';

const Path = `m 107.96168,3.1553619 a 7.9637304,7.9637304 0 0 1 -7.963731,7.9637301 7.9637304,7.9637304 0 0 1 -7.963731,-7.9637301 7.9637304,7.9637304 0 0 1 7.963731,-7.9637304 7.9637304,7.9637304 0 0 1 7.963731,7.9637304 z M 150,3.1533104 c 0,-7.2067451 -9.07972,-12.4420465 -21.52997,-15.5130674 4.26291,-11.030649 5.00554,-20.578099 -0.50056,-24.660485 -1.50781,-1.118041 -3.36848,-1.684241 -5.5225,-1.684241 -6.4313,0 -15.30997,5.159398 -24.451237,13.736512 -9.241784,-9.157675 -18.204571,-14.688385 -24.594839,-14.688385 -1.955032,0 -3.651581,0.506708 -5.048619,1.505765 -4.32856,3.105895 -4.96451,10.132113 -1.836048,20.319616 0.613384,1.998112 1.38678,4.082386 2.254544,6.20974 C 57.76474,-8.4825161 50,-3.5077489 50,3.1533104 c 0,6.5625898 7.53908,11.4901736 18.286629,14.6350466 -4.560375,11.39991 -5.512248,21.345342 0.14155,25.536455 1.509867,1.11804 3.368481,1.682189 5.522504,1.682189 6.427194,0 15.291511,-5.14914 24.422517,-13.709843 8.74738,8.347352 17.13782,13.320067 23.20601,13.320067 1.95503,0 3.65158,-0.506708 5.04862,-1.505764 C 131.97185,39.2773 131.26821,29.912429 127.1571,18.96589 140.27202,15.960515 150,10.614435 150,3.1533104 Z M 122.44492,-34.599533 c 1.25343,0 2.29147,0.295409 3.07717,0.880072 3.25771,2.412506 2.89665,10.144422 -1.13445,20.463218 -5.55327,-1.105732 -11.603,-1.813482 -17.71837,-2.110943 -1.92427,-2.359168 -3.86699,-4.572682 -5.80971,-6.642596 8.88483,-8.291962 16.8383,-12.589751 21.58536,-12.589751 z M 82.730891,13.067968 c 0.960079,1.335494 1.932466,2.636114 2.913059,3.914167 -4.254708,-0.469782 -8.168875,-1.144709 -11.69737,-1.955032 1.249334,-2.703811 2.70176,-5.5286586 4.402413,-8.4622326 1.38678,2.1704345 2.837156,4.3470236 4.381898,6.5030976 z M 74.463546,-8.8210075 c 3.216674,-0.7241619 6.743117,-1.3252365 10.554712,-1.7642475 -0.65031,0.836992 -1.30062,1.6739837 -1.940672,2.5376443 -1.628852,2.1991548 -3.192057,4.468059 -4.685513,6.7677348 -1.454478,-2.5540557 -2.765355,-5.0752882 -3.928527,-7.5411316 z m 6.256923,11.4655562 c 1.702704,-2.6956058 3.583884,-5.456858 5.653798,-8.248882 1.436015,-1.9386206 2.878184,-3.7582571 4.318303,-5.5081447 2.974603,-0.205145 6.076396,-0.320026 9.303327,-0.320026 1.577563,0 3.118203,0.03077 4.636273,0.08206 1.42371,1.7929679 2.85357,3.6577363 4.27933,5.6435402 2.41251,3.3643786 4.53986,6.65900794 6.44771,9.8674763 -1.6227,2.5396956 -3.3931,5.1327289 -5.34198,7.7565335 -1.4914,2.010422 -2.98896,3.901859 -4.48447,5.709187 -1.80733,0.0718 -3.64543,0.118984 -5.536863,0.118984 -3.025889,0 -5.930743,-0.110778 -8.737127,-0.291306 -1.729373,-2.127356 -3.462848,-4.36754 -5.194272,-6.780046 C 84.154597,8.0111429 82.371887,5.3216914 80.720469,2.6445487 Z M 113.31596,14.360382 c 1.49551,-2.02273 2.93358,-4.107004 4.31626,-6.2138434 1.47499,2.7038114 2.76535,5.3091534 3.86288,7.7975624 -3.22283,0.572355 -6.70619,1.025726 -10.40906,1.333443 0.74673,-0.958027 1.49345,-1.922209 2.22992,-2.917162 z m -1.07085,-22.4592789 c -0.72622,-1.0072622 -1.45653,-1.9899071 -2.18685,-2.9602431 4.58294,0.342592 8.84586,0.906741 12.70463,1.6493663 -1.38267,3.060764 -3.03204,6.2835925 -5.00143,9.6397653 -1.73348,-2.8289501 -3.57978,-5.6271284 -5.51635,-8.3288885 z m -11.05117,-7.4262501 c -0.39798,-0.0041 -0.79801,-0.01026 -1.195991,-0.01026 -1.86682,0 -3.743897,0.04308 -5.616872,0.123087 1.191893,-1.323185 2.371477,-2.552004 3.544907,-3.737742 1.079063,1.150864 2.168386,2.355065 3.267956,3.624913 z M 70.740163,-34.812884 c 0.683133,-0.488245 1.577566,-0.73647 2.656629,-0.73647 4.679358,0 12.680014,4.591146 21.659213,13.457514 -2.14992,2.17864 -4.29984,4.521397 -6.423092,7.034423 -5.54507,0.469783 -10.940384,1.278054 -15.859762,2.414557 -0.910844,-2.195051 -1.706807,-4.336766 -2.336602,-6.384113 -2.455586,-7.990399 -2.340705,-13.890371 0.303614,-15.785911 z M 54.098798,3.1533084 c 0,-3.92032168 6.101013,-8.0909203 16.321339,-10.9691052 1.571411,3.4054077 3.421819,6.90723345 5.514299,10.4521397 C 73.653223,6.4274232 71.618184,10.249275 69.91548,13.980863 59.996718,11.114987 54.098798,7.0120865 54.098798,3.1533084 Z M 73.948632,40.910253 c -1.255488,0 -2.293522,-0.295409 -3.079227,-0.878021 -3.331556,-2.469946 -2.872031,-10.50958 1.423706,-21.185328 5.214787,1.237024 10.981414,2.094531 16.906003,2.568416 2.076068,2.49046 4.164444,4.829114 6.250769,6.981085 -8.847905,8.242728 -16.768555,12.513848 -21.501251,12.513848 z M 94.891889,21.749706 c 1.702703,0.06359 3.407459,0.09847 5.104008,0.09847 0.640053,0 1.278053,-0.0062 1.918103,-0.01641 -1.17958,1.304722 -2.348907,2.521233 -3.510028,3.696714 -1.15907,-1.189842 -2.330448,-2.453535 -3.512083,-3.778772 z m 29.346001,18.0343 c -3.48747,2.504821 -12.43384,-1.442169 -22.90855,-11.367086 2.07812,-2.102737 4.15008,-4.363435 6.20564,-6.784147 5.34813,-0.299511 10.63472,-0.904689 15.5623,-1.819636 3.89776,10.193657 4.26497,17.726583 1.14061,19.970869 z m 1.36216,-24.664588 c -1.53859,-3.559266 -3.40131,-7.2313621 -5.47737,-10.897304 2.58893,-4.25265659 4.89681,-8.5648053 6.75132,-12.7354039 11.83892,2.8638247 19.02105,7.4139417 19.02105,11.6686497 0.002,4.4065154 -7.7032,9.1228002 -20.295,11.9640582 z`;
const Title = styled.h2`
    font-size: 22px;
    font-weight: bolder;
    margin: 2rem 0;
`;

const Basic = () => {
    const refCircle = useRef<SVGSVGElement>(null);
    const refReactPath = useRef<SVGSVGElement>(null);
    const refCoordinate = useRef<SVGSVGElement>(null);
    const refScale = useRef<SVGSVGElement>(null);
    const refAxis = useRef<SVGSVGElement>(null);
    const refX = useRef<SVGGElement>(null);
    const refY = useRef<SVGGElement>(null);
    const refData = useRef<SVGGElement>(null);
    const refX2 = useRef<SVGGElement>(null);
    const refY2 = useRef<SVGGElement>(null);

    const x = d3.scaleLinear().domain([0, 100]).range([0, 400]);

    const margin = {
        top: 10,
        right: 40,
        bottom: 30,
        left: 30,
    };
    const width = 450 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const xAdjusted = d3.scaleLinear().domain([0, 100]).range([0, width]);

    const yAdjusted = d3.scaleLinear().domain([0, 100]).range([height, 0]);

    const data = [
        { x: 10, y: 20 },
        { x: 40, y: 90 },
        { x: 80, y: 50 },
    ];

    useEffect(() => {
        const currentCircle = refCircle.current;
        const addStroke = () => {
            d3.select(currentCircle) // select the elements that have the class 'target'
                .style('stroke-width', 8); // change their style: stroke width is not equal to 8 pixels
        };

        const currentCoordinate = refCoordinate.current;
        const addCircles = () => {
            const svg = d3.select(currentCoordinate);
            svg.append('circle')
                .attr('cx', 2)
                .attr('cy', 2)
                .attr('r', 40)
                .style('fill', 'pink');
            svg.append('circle')
                .attr('cx', 140)
                .attr('cy', 70)
                .attr('r', 40)
                .attr('fill', 'yellow');
            svg.append('circle')
                .attr('cx', 300)
                .attr('cy', 100)
                .attr('r', 40)
                .attr('fill', 'greenyellow');
        };

        const addScale = () => {
            const svg = d3.select(refScale.current);
            svg.append('circle')
                .attr('cx', x(10))
                .attr('cy', 100)
                .attr('r', 40)
                .style('fill', 'pink');
            svg.append('circle')
                .attr('cx', x(50))
                .attr('cy', 100)
                .attr('r', 40)
                .attr('fill', 'yellow');
            svg.append('circle')
                .attr('cx', x(100))
                .attr('cy', 100)
                .attr('r', 40)
                .attr('fill', 'greenyellow');
        };

        const addAxis = () => {
            const xAxis: any = d3.axisBottom(x);
            const svg = d3.select(refAxis.current);
            svg.call(xAxis);
        };

        const addAdjustedAxis = () => {
            const svgX = d3.select(refX.current);
            const xAxis: any = d3.axisBottom(xAdjusted);
            svgX.call(xAxis);

            const yAxis: any = d3.axisLeft(yAdjusted);
            const svgY = d3.select(refY.current);
            svgY.call(yAxis);
        };

        const addAdjustedAxis2 = () => {
            const svgX = d3.select(refX2.current);
            const xAxis: any = d3.axisBottom(xAdjusted);
            svgX.call(xAxis);

            const yAxis: any = d3.axisLeft(yAdjusted);
            const svgY = d3.select(refY2.current);
            svgY.call(yAxis);
        };

        addStroke();
        addCircles();
        addScale();
        addAxis();
        addAdjustedAxis();
        addAdjustedAxis2();
    });

    useEffect(() => {
        const bindData = () => {
            const svg = d3.select(refData.current);
            svg.selectAll('whatever')
                .data(data)
                .join('circle')
                .attr('cx', (d) => xAdjusted(d.x))
                .attr('cy', (d) => yAdjusted(d.y))
                .attr('r', 7);
        };

        bindData();
    });

    return (
        <>
            <Title>All SVG is supported in JSX including path</Title>

            <svg ref={refReactPath}>
                <path transform={`translate(50,100)`} d={Path} />
            </svg>

            <Divider />
            <Title> Add axis, margin, translation and data binding </Title>
            <div id="area">
                <svg
                    width={width + margin.left + margin.right}
                    height={height + margin.top + margin.bottom}
                >
                    <g
                        ref={refData}
                        transform={`translate(${margin.left},${margin.top})`}
                    >
                        <g ref={refX2} transform={`translate(0, ${height})`} />
                        <g ref={refY2} />
                    </g>
                </svg>
            </div>
        </>
    );
};

export default Basic;
